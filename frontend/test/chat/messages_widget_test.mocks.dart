// Mocks generated by Mockito 5.4.2 from annotations
// in frontend/test/chat/messages_widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;
import 'dart:ui' as _i12;

import 'package:flutter/material.dart' as _i10;
import 'package:frontend/src/app/api/interfaces/paginated_api.dart' as _i4;
import 'package:frontend/src/app/api/message_api.dart' as _i3;
import 'package:frontend/src/app/model/collection_model.dart' as _i2;
import 'package:frontend/src/app/model/conversation_model.dart' as _i14;
import 'package:frontend/src/app/model/match_model.dart' as _i13;
import 'package:frontend/src/app/model/message_model.dart' as _i11;
import 'package:frontend/src/app/model/user_model.dart' as _i7;
import 'package:frontend/src/app/service/interfaces/paginated_service.dart'
    as _i5;
import 'package:frontend/src/app/service/message_service.dart' as _i15;
import 'package:frontend/src/config/app_state.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:web_socket_channel/web_socket_channel.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCollection_0<T> extends _i1.SmartFake implements _i2.Collection<T> {
  _FakeCollection_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMessageApi_1 extends _i1.SmartFake implements _i3.MessageApi {
  _FakeMessageApi_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePaginatedService_2<T, U extends _i4.PaginatedApi<T>>
    extends _i1.SmartFake implements _i5.PaginatedService<T, U> {
  _FakePaginatedService_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [StateManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockStateManager extends _i1.Mock implements _i6.StateManager {
  MockStateManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set user(_i7.User? _user) => super.noSuchMethod(
        Invocation.setter(
          #user,
          _user,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set socket(_i8.WebSocketChannel? _socket) => super.noSuchMethod(
        Invocation.setter(
          #socket,
          _socket,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get connected => (super.noSuchMethod(
        Invocation.getter(#connected),
        returnValue: false,
      ) as bool);

  @override
  set connected(bool? _connected) => super.noSuchMethod(
        Invocation.setter(
          #connected,
          _connected,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get loginRetries => (super.noSuchMethod(
        Invocation.getter(#loginRetries),
        returnValue: 0,
      ) as int);

  @override
  set loginRetries(int? _loginRetries) => super.noSuchMethod(
        Invocation.setter(
          #loginRetries,
          _loginRetries,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get initialized => (super.noSuchMethod(
        Invocation.getter(#initialized),
        returnValue: false,
      ) as bool);

  @override
  set initialized(bool? _initialized) => super.noSuchMethod(
        Invocation.setter(
          #initialized,
          _initialized,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i9.Future<void> registerUser(
    _i7.User? user,
    _i10.BuildContext? buildContext,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #registerUser,
          [
            user,
            buildContext,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> initialize(
    _i10.BuildContext? buildContext, {
    bool? force = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [buildContext],
          {#force: force},
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> initializeUsers(
    _i10.BuildContext? buildContext, {
    bool? force = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #initializeUsers,
          [buildContext],
          {#force: force},
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> initializeConversations(
    _i10.BuildContext? buildContext, {
    bool? force = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #initializeConversations,
          [buildContext],
          {#force: force},
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> initializeMatches(
    _i10.BuildContext? buildContext, {
    bool? force = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #initializeMatches,
          [buildContext],
          {#force: force},
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> connect(_i10.BuildContext? buildContext) =>
      (super.noSuchMethod(
        Invocation.method(
          #connect,
          [buildContext],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> receiveMessage(
    _i11.Message? message,
    _i10.BuildContext? context,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #receiveMessage,
          [
            message,
            context,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> sendMessage(
    _i11.Message? message,
    _i10.BuildContext? context,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [
            message,
            context,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  void addListener(_i12.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i12.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [MatchStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockMatchStorage extends _i1.Mock implements _i6.MatchStorage {
  MockMatchStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Collection<_i13.Match> get matches => (super.noSuchMethod(
        Invocation.getter(#matches),
        returnValue: _FakeCollection_0<_i13.Match>(
          this,
          Invocation.getter(#matches),
        ),
      ) as _i2.Collection<_i13.Match>);

  @override
  set matches(_i2.Collection<_i13.Match>? _matches) => super.noSuchMethod(
        Invocation.setter(
          #matches,
          _matches,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get loading => (super.noSuchMethod(
        Invocation.getter(#loading),
        returnValue: false,
      ) as bool);

  @override
  set loading(bool? _loading) => super.noSuchMethod(
        Invocation.setter(
          #loading,
          _loading,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get initiated => (super.noSuchMethod(
        Invocation.getter(#initiated),
        returnValue: false,
      ) as bool);

  @override
  set initiated(bool? _initiated) => super.noSuchMethod(
        Invocation.setter(
          #initiated,
          _initiated,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void addListener(_i12.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i12.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ConversationStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockConversationStorage extends _i1.Mock
    implements _i6.ConversationStorage {
  MockConversationStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Collection<_i14.Conversation> get conversations => (super.noSuchMethod(
        Invocation.getter(#conversations),
        returnValue: _FakeCollection_0<_i14.Conversation>(
          this,
          Invocation.getter(#conversations),
        ),
      ) as _i2.Collection<_i14.Conversation>);

  @override
  set conversations(_i2.Collection<_i14.Conversation>? _conversations) =>
      super.noSuchMethod(
        Invocation.setter(
          #conversations,
          _conversations,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get loading => (super.noSuchMethod(
        Invocation.getter(#loading),
        returnValue: false,
      ) as bool);

  @override
  set loading(bool? _loading) => super.noSuchMethod(
        Invocation.setter(
          #loading,
          _loading,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get initiated => (super.noSuchMethod(
        Invocation.getter(#initiated),
        returnValue: false,
      ) as bool);

  @override
  set initiated(bool? _initiated) => super.noSuchMethod(
        Invocation.setter(
          #initiated,
          _initiated,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void addListener(_i12.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i12.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [UserStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserStorage extends _i1.Mock implements _i6.UserStorage {
  MockUserStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Collection<_i7.User> get users => (super.noSuchMethod(
        Invocation.getter(#users),
        returnValue: _FakeCollection_0<_i7.User>(
          this,
          Invocation.getter(#users),
        ),
      ) as _i2.Collection<_i7.User>);

  @override
  set users(_i2.Collection<_i7.User>? _users) => super.noSuchMethod(
        Invocation.setter(
          #users,
          _users,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get loading => (super.noSuchMethod(
        Invocation.getter(#loading),
        returnValue: false,
      ) as bool);

  @override
  set loading(bool? _loading) => super.noSuchMethod(
        Invocation.setter(
          #loading,
          _loading,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get initiated => (super.noSuchMethod(
        Invocation.getter(#initiated),
        returnValue: false,
      ) as bool);

  @override
  set initiated(bool? _initiated) => super.noSuchMethod(
        Invocation.setter(
          #initiated,
          _initiated,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void addListener(_i12.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i12.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [MessageStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockMessageStorage extends _i1.Mock implements _i6.MessageStorage {
  MockMessageStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<int, _i2.Collection<_i11.Message>> get messages => (super.noSuchMethod(
        Invocation.getter(#messages),
        returnValue: <int, _i2.Collection<_i11.Message>>{},
      ) as Map<int, _i2.Collection<_i11.Message>>);

  @override
  set messages(Map<int, _i2.Collection<_i11.Message>>? _messages) =>
      super.noSuchMethod(
        Invocation.setter(
          #messages,
          _messages,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get loading => (super.noSuchMethod(
        Invocation.getter(#loading),
        returnValue: false,
      ) as bool);

  @override
  set loading(bool? _loading) => super.noSuchMethod(
        Invocation.setter(
          #loading,
          _loading,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get initiated => (super.noSuchMethod(
        Invocation.getter(#initiated),
        returnValue: false,
      ) as bool);

  @override
  set initiated(bool? _initiated) => super.noSuchMethod(
        Invocation.setter(
          #initiated,
          _initiated,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i9.Future<void> initializeFirstPage(
    int? conversationId,
    _i15.MessageService? messageService,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #initializeFirstPage,
          [
            conversationId,
            messageService,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  void addMessage(
    _i11.Message? message,
    _i15.MessageService? messageService,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #addMessage,
          [
            message,
            messageService,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<void> getNextPage(
    int? conversationId,
    _i15.MessageService? messageService,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNextPage,
          [
            conversationId,
            messageService,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  void addListener(_i12.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i12.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [MessageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMessageService extends _i1.Mock implements _i15.MessageService {
  MockMessageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.MessageApi get api => (super.noSuchMethod(
        Invocation.getter(#api),
        returnValue: _FakeMessageApi_1(
          this,
          Invocation.getter(#api),
        ),
      ) as _i3.MessageApi);

  @override
  _i5.PaginatedService<_i11.Message, _i3.MessageApi> copyWith(
          String? urlParams) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyWith,
          [urlParams],
        ),
        returnValue: _FakePaginatedService_2<_i11.Message, _i3.MessageApi>(
          this,
          Invocation.method(
            #copyWith,
            [urlParams],
          ),
        ),
      ) as _i5.PaginatedService<_i11.Message, _i3.MessageApi>);

  @override
  _i9.Future<Map<int, _i11.Message>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue:
            _i9.Future<Map<int, _i11.Message>>.value(<int, _i11.Message>{}),
      ) as _i9.Future<Map<int, _i11.Message>>);

  @override
  _i9.Future<Map<int, _i11.Message>> getFirst() => (super.noSuchMethod(
        Invocation.method(
          #getFirst,
          [],
        ),
        returnValue:
            _i9.Future<Map<int, _i11.Message>>.value(<int, _i11.Message>{}),
      ) as _i9.Future<Map<int, _i11.Message>>);

  @override
  _i9.Future<Map<int, _i11.Message>> getNextPage(
    int? currentPage,
    int? size,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNextPage,
          [
            currentPage,
            size,
          ],
        ),
        returnValue:
            _i9.Future<Map<int, _i11.Message>>.value(<int, _i11.Message>{}),
      ) as _i9.Future<Map<int, _i11.Message>>);

  @override
  _i9.Future<int> getMaxPage(
    int? currentPage,
    int? size,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMaxPage,
          [
            currentPage,
            size,
          ],
        ),
        returnValue: _i9.Future<int>.value(0),
      ) as _i9.Future<int>);

  @override
  _i9.Future<bool> hasNext(
    int? currentPage,
    int? size,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #hasNext,
          [
            currentPage,
            size,
          ],
        ),
        returnValue: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);
}
